{"version":3,"sources":["index.js.flow"],"names":["CacheConf","require","Conf","fs","Fuse","got","moment","notifier","os","path","semver","FileCache","updater","Hugo","_fuseDefaults","keys","threshold","_options","useTmpCache","checkUpdates","updateSource","updateInterval","duration","updateNotification","updateItem","_outputBuffer","config","cwd","workflowMeta","data","cache","configName","version","item","items","title","alfredMeta","debug","console","error","arg","variables","gte","alfredworkflow","lt","push","map","addItem","key","value","JSON","parse","e","keyword","callback","query","process","argv","filePath","cacheName","catch","err","then","result","current","latest","valid","gt","checkedOnline","notify","name","subtitle","sender","timeout","icon","url","task","emptyDir","emptyDirSync","options","length","fuse","search","cacheDirChanged","isDuration","candidates","parseFloat","_rerun","rerun","output","log","cacheAge","json","cacheResult","get","set","response","body","maxAge","env","alfred_version","alfred_debug","theme","alfred_theme","themeFile","themeBackground","alfred_theme_background","themeSelectionBackground","alfred_theme_selection_background","themeSubtext","alfred_theme_subtext","preferences","alfred_preferences","preferencesLocalHash","alfred_preferences_localhash","HOME","homedir","resolve","major","statSync","readJsonSync","throws","outputBuffer","cacheDir","alfred_workflow_cache","bundleId","alfred_workflow_bundleid","join","tmpdir","alfred_workflow_name","alfred_workflow_version","uid","alfred_workflow_uid","alfred_workflow_data","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n\nconst CacheConf = require('cache-conf');\nconst Conf = require('conf');\nconst fs = require('fs-promise');\nconst Fuse = require('fuse.js');\nconst got = require('got');\nconst moment = require('moment');\nconst notifier = require('node-notifier');\nconst os = require('os');\nconst path = require('path');\nconst semver = require('semver');\n\nconst FileCache = require('./file-cache');\nconst updater = require('./updater');\n\n/**\n * Hugo\n */\nclass Hugo {\n    /**\n     * FuseJS defaults\n     * @see https://github.com/krisk/fuse#options\n     * @type {Object}\n     */\n    _fuseDefaults: Object;\n\n    /**\n     * Hugo options\n     * @type {Object}\n     */\n    _options: Object;\n\n    /**\n     * Output buffer\n     * @type {Object}\n     */\n    _outputBuffer: Object;\n\n    /**\n     * Refresh (rerun) interval in seconds\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @type {number|null}\n     */\n    _rerun: ?number;\n\n    /**\n     * Cache store\n     * @see https://www.npmjs.com/package/cache-conf\n     * @type {CacheConf}\n     */\n    cache: CacheConf;\n\n    /**\n     * Configuration store\n     * @see https://www.npmjs.com/package/conf\n     * @type {Conf}\n     */\n    config: Conf;\n\n    /**\n     * Hugo constructor\n     * @constructor\n     */\n    constructor() {\n        // Set defaults for FuseJS\n        this._fuseDefaults = {\n            keys: ['title'],\n            threshold: 0.4\n        };\n\n        // Save options\n        this._options = {\n            useTmpCache: true,\n            checkUpdates: true,\n            updateSource: 'packal',\n            updateInterval: moment.duration(1, 'days'),\n            updateNotification: true,\n            updateItem: true\n        };\n\n        // Initialize output buffer\n        this._outputBuffer = {};\n\n        // Configure config store\n        this.config = new Conf({\n            cwd: this.workflowMeta.data\n        });\n\n        // Configure cache store\n        this.cache = new CacheConf({\n            configName: 'cache',\n            cwd: this.workflowMeta.cache,\n            version: this.workflowMeta.version\n        });\n    }\n\n    /**\n     * Alfred metadata\n     * @return {Object}\n     */\n    get alfredMeta(): Object {\n        let version: string = process.env.alfred_version || '0.0.0';\n\n        // Check Alfred version for missing patch version (e.g. 3.4 is invalid, should be 3.4.0)\n        if (!semver.valid(version)) {\n            version += '.0';\n\n            // Check if adding .0 to the end makes a valid version string (eg. in case of 3.4)\n            if (!semver.valid(version) && process.env.alfred_debug === '1') {\n                console.error(`Invalid Alfred version: ${version}`);\n                version = '0.0.0';\n            }\n        }\n\n        // Gather environment information\n        let data: Object = {\n            version: version,\n            theme: process.env.alfred_theme,\n            themeFile: '',\n            themeBackground: process.env.alfred_theme_background,\n            themeSelectionBackground: process.env.alfred_theme_selection_background,\n            themeSubtext: parseFloat(process.env.alfred_theme_subtext),\n            preferences: process.env.alfred_preferences,\n            preferencesLocalHash: process.env.alfred_preferences_localhash,\n            debug: process.env.alfred_debug === '1'\n        };\n\n        // Find and load curent Alfred theme file\n        if (process.env.HOME && data.theme) {\n            let homedir: string = process.env.HOME || '';\n\n            let themeFile = path.resolve(homedir, 'Library', 'Application Support', 'Alfred ' + semver.major(version),\n                'Alfred.alfredpreferences', 'themes', data.theme, 'theme.json');\n\n            try {\n                fs.statSync(themeFile);\n                data.themeFile = themeFile;\n            } catch (e) {\n                if (process.env.alfred_debug === '1') {\n                    console.error(`Could not find theme file \"${themeFile}\"`);\n                }\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * Alfred theme\n     * @return {Object}\n     */\n    get alfredTheme(): Object {\n        let themeFile = this.alfredMeta.themeFile;\n\n        if (!themeFile) {\n            return {};\n        }\n\n        return fs.readJsonSync(themeFile, {throws: false}) || {};\n    }\n\n    /**\n     * Alfred user input\n     * @return {string}\n     */\n    get input(): string {\n        if (process.argv.length > 3) {\n            return process.argv[3] || '';\n        }\n        return process.argv[2] || '';\n    }\n\n    /**\n     * Number of Alfred items in the current output buffer\n     * @return {number}\n     */\n    get itemCount(): number {\n        if (this.outputBuffer && this.outputBuffer.items) {\n            return this.outputBuffer.items.length;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Current output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @return {Object} Object to be output and interpreted by Alfred\n     */\n    get outputBuffer(): Object {\n        return this._outputBuffer;\n    }\n\n    /**\n     * Workflow metadata\n     * @return {Object}\n     */\n    get workflowMeta(): Object {\n        let cacheDir = process.env.alfred_workflow_cache;\n        let bundleId = process.env.alfred_workflow_bundleid;\n\n        if (bundleId && this._options.useTmpCache === true) {\n            cacheDir = path.resolve(path.join(os.tmpdir(), bundleId));\n        }\n\n        return {\n            name: process.env.alfred_workflow_name,\n            version: process.env.alfred_workflow_version,\n            uid: process.env.alfred_workflow_uid,\n            bundleId: bundleId,\n            data: process.env.alfred_workflow_data,\n            cache: cacheDir,\n            icon: path.join(process.cwd(), 'icon.png')\n        };\n    }\n\n    /**\n     * Add item to output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @param {Object} item Item to add\n     * @return {Hugo}\n     */\n    addItem(item: Object): Hugo {\n        if (!this._outputBuffer.items) {\n            this._outputBuffer.items = [];\n        }\n\n        // Require item title\n        if (!item.title) {\n            if (this.alfredMeta.debug === true) {\n                console.error('Item skipped, missing title.');\n            }\n            return this;\n        }\n\n        // Parse item variables\n        if (item.arg && typeof item.arg === 'object') {\n            let arg = item.arg.arg;\n            let variables = item.arg.variables || {};\n\n            if (semver.gte(this.alfredMeta.version, '3.4.1')) {\n                // Delete item arg\n                delete item.arg;\n\n                // Only add arg when there is one\n                if (arg) {\n                    item.arg = arg;\n                }\n\n                // Item variables\n                item.variables = Object.assign({}, item.variables, variables);\n            } else {\n                // Merge item.variables (new style) with item.arg.variables (old style)\n                if (item.variables && typeof item.variables === 'object') {\n                    variables = Object.assign({}, variables, item.variables);\n                    delete item.variables;\n                }\n\n                // Build item arg (old style)\n                item.arg = JSON.stringify({\n                    alfredworkflow: {\n                        arg: arg,\n                        variables: variables\n                    }\n                });\n            }\n        } else if (item.variables && typeof item.variables === 'object' && semver.lt(this.alfredMeta.version, '3.4.1')) {\n            // Build item arg (old style) with new style item variables\n            item.arg = JSON.stringify({\n                alfredworkflow: {\n                    arg: item.arg,\n                    variables: item.variables\n                }\n            });\n\n            delete item.variables;\n        }\n\n        // Add item to output buffer\n        this._outputBuffer.items.push(item);\n\n        return this;\n    }\n\n    /**\n     * Add items to output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @param {Array.<Object>} items List of items to add\n     * @return {Hugo}\n     */\n    addItems(items: Array<Object>): Hugo {\n        items.map(item => {\n            this.addItem(item);\n            return item;\n        });\n\n        return this;\n    }\n\n    /**\n     * Add session variable to output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @param {string} key Variable key\n     * @param {string} value Variable value\n     * @return {Hugo}\n     */\n    addVariable(key: string, value: string): Hugo {\n        if (!this._outputBuffer.variables) {\n            this._outputBuffer.variables = {};\n        }\n\n        this._outputBuffer.variables[key] = value;\n\n        return this;\n    }\n\n    /**\n     * Add session variables to output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json/\n     * @param {Object} variables List of variables to add\n     * @return {Hugo}\n     */\n    addVariables(variables: Object): Hugo {\n        if (!this._outputBuffer.variables) {\n            this._outputBuffer.variables = variables;\n            return this;\n        }\n\n        this._outputBuffer.variables = Object.assign({}, this._outputBuffer.variables, variables);\n\n        return this;\n    }\n\n    /**\n     * Get session variable from output buffer\n     * @param {string} key Variable key\n     * @return {string|null} Variable value\n     */\n    getVariable(key: string): ?string {\n        if (!this._outputBuffer.variables) {\n            return null;\n        }\n\n        return this._outputBuffer.variables[key] || null;\n    }\n\n    /**\n     * Get session variables from output buffer\n     * @return {Object} Variables\n     */\n    getVariables(): Object {\n        return this._outputBuffer.variables || {};\n    }\n\n    /**\n     * Get item variable\n     * @param {Object} item\n     * @param {string} key Variable key\n     * @return {string|null} Variable value\n     */\n    getItemVariable(item: Object, key: string): ?string {\n        if (semver.gte(this.alfredMeta.version, '3.4.1')) {\n            if (item.variables) {\n                return item.variables[key] || null;\n            }\n        } else if (item.arg) {\n            try {\n                let arg = {};\n                let variables = {};\n\n                if (typeof item.arg === 'string') {\n                    arg = JSON.parse(item.arg);\n                }\n\n                if (arg.alfredworkflow) {\n                    variables = arg.alfredworkflow.variables || {};\n                }\n\n                return variables[key] || null;\n            } catch (e) {}\n        }\n\n        return null;\n    }\n\n    /**\n     * Get item variables\n     *\n     * As of Alfred 3.4.1 item variables are handled differently (properly). This method makes it easier to get the\n     * variables of an item without having to deal with different versions.\n     *\n     * @param {Object} item\n     * @return {Object} Item variables\n     */\n    getItemVariables(item: Object): Object {\n        if (semver.gte(this.alfredMeta.version, '3.4.1')) {\n            return item.variables || {};\n        } else if (item.arg) {\n            try {\n                let arg = {};\n\n                if (typeof item.arg === 'string') {\n                    arg = JSON.parse(item.arg);\n                }\n\n                if (arg.alfredworkflow) {\n                    return arg.alfredworkflow.variables || {};\n                }\n\n                return arg.variables || {};\n            } catch (e) {}\n        }\n\n        return {};\n    }\n\n    /**\n     * Run a callback when first script argument matches keyword. Callback will have third argument as query parameter.\n     * @example node index.js myaction \"my query\"\n     * @param {string} keyword Action name\n     * @param {Function} callback Callback to execute when query matches action name\n     * @return {Hugo}\n     */\n    action(keyword: string, callback: (query: string) => void): Hugo {\n        let query: string = process.argv[2];\n\n        if (query && callback && query === keyword) {\n            query = process.argv[3] || '';\n            callback(query);\n        }\n\n        return this;\n    }\n\n    /**\n     * Cache processed data\n     * This allows you to read and process the data once, then storing it in cache until the file has changed again.\n     *\n     * @param {string} filepath File path\n     * @param {string} cacheName Cache name (must be unique for each file)\n     * @return {FileCache}\n     */\n    cacheFile(filePath: string, cacheName: string): FileCache {\n        return new FileCache(filePath, cacheName, this.workflowMeta.cache);\n    }\n\n    /**\n     * Check for updates and notify the user\n     * @async\n     * @return {Promise}\n     */\n    async checkUpdates() {\n        // No need to check if we're not showing anything, duh.\n        if (this._options.checkUpdates !== true ||\n                (this._options.updateItem !== true && this._options.updateNotification !== true)) {\n            return;\n        }\n\n        await updater.checkUpdates(this._options.updateSource, this._options.updateInterval)\n            .catch(err => {\n                console.error(err);\n                return;\n            })\n            .then(result => {\n                if (!result) {\n                    return;\n                }\n\n                // Version information\n                let current: string = this.workflowMeta.version;\n                let latest: string = result.version;\n\n                if (!semver.valid(current)) {\n                    console.error(`Version ${current} is not a valid version number.`);\n                    return;\n                }\n\n                if (!semver.valid(latest)) {\n                    console.error(`Could not determine latest version number.`);\n                    return;\n                }\n\n                // Display notification\n                if (semver.gt(latest, current)) {\n                    if (result.checkedOnline === true && this._options.updateNotification === true) {\n                        notifier.notify({\n                            title: this.workflowMeta.name || 'Alfred',\n                            subtitle: `Workflow version ${latest} available. Current version: ${current}.`,\n                            sender: 'com.runningwithcrayons.Alfred-3',\n                            timeout: 10\n                        });\n                    }\n                    if (this._options.updateItem === true) {\n                        this.addItem({\n                            title: `Workflow update available!`,\n                            subtitle: `Version ${latest} is available. Current version: ${current}.`,\n                            icon: this.workflowMeta.icon,\n                            arg: result.url,\n                            variables: {\n                                task: 'wfUpdate'\n                            }\n                        });\n                    }\n                }\n            });\n    }\n\n    /**\n     * Clear cache\n     * @async\n     * @return {Promise}\n     */\n    async clearCache() {\n        if (this.workflowMeta.cache) {\n            return fs.emptyDir(this.workflowMeta.cache);\n        }\n    }\n\n    /**\n     * Clear cache (sync)\n     * @return {void}\n     */\n    clearCacheSync() {\n        if (this.workflowMeta.cache) {\n            return fs.emptyDirSync(this.workflowMeta.cache);\n        }\n    }\n\n    /**\n     * Filter added items (output buffer) with fuse.js\n     * @see http://fusejs.io\n     * @param {string} query Search string\n     * @param {Object} options fuse.js options\n     * @return {Hugo}\n     */\n    filterItems(query: string, options: Object = {}): Hugo {\n        options = Object.assign({}, this._fuseDefaults, options);\n\n        if (query.length === 0) {\n            return this;\n        }\n\n        // Create fuse.js fuzzy search object\n        let fuse = new Fuse(this._outputBuffer.items, options);\n\n        // Set output buffer to matching items\n        this._outputBuffer.items = fuse.search(query) || [];\n\n        return this;\n    }\n\n    /**\n     * Set Hugo options\n     * @param {Object} options Options to set\n     * @return {Hugo}\n     */\n    options(options: Object): Hugo {\n        let cacheDirChanged = 'useTmpCache' in options && options.useTmpCache !== this._options.useTmpCache;\n\n        // Convert updateInterval to moment.Duration object\n        if (options.updateInterval && !moment.isDuration(options.updateInterval)) {\n            if (options.updateInterval < 1) {\n                delete options.updateInterval;\n            } else {\n                options.updateInterval = moment.duration(options.updateInterval, 'seconds') || moment.duration(1, 'days');\n            }\n        }\n\n        // Update options\n        this._options = Object.assign({}, this._options, options);\n\n        // Update cache dir\n        if (cacheDirChanged) {\n            this.cache = new CacheConf({\n                configName: 'cache',\n                cwd: this.workflowMeta.cache,\n                version: this.workflowMeta.version\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Filter list of candidates with fuse.js\n     * @see http://fusejs.io\n     * @param {Array.<Object>} candidates Input data\n     * @param {string} query Search string\n     * @param {Object} options fuse.js options\n     * @return {Array.<Object>}\n     */\n    matches(candidates: Array<Object>, query: string, options: Object = {}): Array<Object> {\n        options = Object.assign({}, this._fuseDefaults, options);\n\n        if (query.length === 0) {\n            return candidates;\n        }\n\n        // Create fuse.js fuzzy search object\n        let fuse = new Fuse(candidates, options);\n\n        // Return results\n        return fuse.search(query) || [];\n    }\n\n    /**\n     * Set rerun parameter\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @param {number} value Interval to rerun the script when idle\n     * @return {Hugo}\n     */\n    rerun(value: number): Hugo {\n        value = parseFloat(value);\n\n        if (value && value > 0.1 && value <= 5) {\n            this._rerun = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Flush the output buffer so Alfred shows our items\n     * @async\n     */\n    async feedback() {\n        if (this._rerun) {\n            this._outputBuffer.rerun = this._rerun;\n        }\n\n        // Check for updates\n        if (this._options.checkUpdates === true) {\n            await this.checkUpdates()\n                .catch(() => {});\n        }\n\n        let output = this._outputBuffer;\n\n        // Output JSON\n        console.log(JSON.stringify(output, null, '\\t'));\n\n        // Reset output buffer\n        this._outputBuffer = {};\n\n        return output;\n    }\n\n    /**\n     * Fetch url and parse JSON. Useful for REST APIs.\n     * @see https://www.npmjs.com/package/got\n     * @param {string} url Url to request\n     * @param {Object} options http.request options\n     * @param {number|null} cacheAge Cache lifetime (in seconds), above 0 to enable or null to disable.\n     * @return {Object|string}\n     * @async\n     */\n    async fetch(url: string, options: Object = {}, cacheAge: ?number = null): Object|string {\n        // Set default options\n        options = Object.assign({}, {\n            json: true\n        }, options);\n\n        // Check cache for a hit\n        if (cacheAge && cacheAge > 0) {\n            let cacheResult: Object|string|null = this.cache.get(url);\n\n            if (cacheResult) {\n                return cacheResult;\n            }\n        }\n\n        // Do request\n        return got(url, options)\n            .then(response => {\n                if (cacheAge && cacheAge > 0) {\n                    this.cache.set(url, response.body, {\n                        maxAge: cacheAge * 1000\n                    });\n                }\n\n                return response.body;\n            });\n    }\n}\n\nmodule.exports = new Hugo();\n"]}