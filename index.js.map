{"version":3,"sources":["index.js.flow"],"names":["CacheConf","require","Conf","fs","Fuse","got","moment","notifier","os","path","semver","FileCache","updater","Hugo","_fuseDefaults","keys","threshold","_options","useTmpCache","checkUpdates","updateSource","updateInterval","duration","updateNotification","updateItem","_outputBuffer","config","cwd","workflowMeta","data","cache","configName","version","item","items","title","alfredMeta","debug","console","error","arg","variables","gte","Object","assign","JSON","stringify","alfredworkflow","lt","push","map","addItem","key","value","parse","e","keyword","callback","query","process","argv","filePath","cacheName","catch","err","then","result","current","latest","valid","gt","checkedOnline","notify","message","subtitle","icon","url","task","emptyDir","emptyDirSync","options","length","fuse","search","cacheDirChanged","isDuration","candidates","Promise","resolve","reject","defaults","name","trim","sender","contentImage","response","parseFloat","_rerun","rerun","output","log","cacheAge","json","cacheResult","get","set","body","maxAge","env","alfred_version","alfred_debug","theme","alfred_theme","themeFile","themeBackground","alfred_theme_background","themeSelectionBackground","alfred_theme_selection_background","themeSubtext","alfred_theme_subtext","preferences","alfred_preferences","preferencesLocalHash","alfred_preferences_localhash","HOME","homedir","major","statSync","readJsonSync","throws","outputBuffer","cacheDir","alfred_workflow_cache","bundleId","alfred_workflow_bundleid","join","tmpdir","alfred_workflow_name","alfred_workflow_version","uid","alfred_workflow_uid","alfred_workflow_data","module","exports"],"mappings":"ucAEA,GAAMA,CAAAA,SAAS,CAAGC,OAAO,CAAC,YAAD,CAAzB,CACA,GAAMC,CAAAA,IAAI,CAAGD,OAAO,CAAC,MAAD,CAApB,CACA,GAAME,CAAAA,EAAE,CAAGF,OAAO,CAAC,UAAD,CAAlB,CACA,GAAMG,CAAAA,IAAI,CAAGH,OAAO,CAAC,SAAD,CAApB,CACA,GAAMI,CAAAA,GAAG,CAAGJ,OAAO,CAAC,KAAD,CAAnB,CACA,GAAMK,CAAAA,MAAM,CAAGL,OAAO,CAAC,QAAD,CAAtB,CACA,GAAMM,CAAAA,QAAQ,CAAGN,OAAO,CAAC,eAAD,CAAxB,CACA,GAAMO,CAAAA,EAAE,CAAGP,OAAO,CAAC,IAAD,CAAlB,CACA,GAAMQ,CAAAA,IAAI,CAAGR,OAAO,CAAC,MAAD,CAApB,CACA,GAAMS,CAAAA,MAAM,CAAGT,OAAO,CAAC,QAAD,CAAtB,CAEA,GAAMU,CAAAA,SAAS,CAAGV,OAAO,CAAC,cAAD,CAAzB,CACA,GAAMW,CAAAA,OAAO,CAAGX,OAAO,CAAC,WAAD,CAAvB,C,GAKMY,CAAAA,I,YA6CF,eAAc,yCAEV,KAAKC,aAAL,CAAqB,CACjBC,IAAI,CAAE,CAAC,OAAD,CADW,CAEjBC,SAAS,CAAE,GAFM,CAArB,CAMA,KAAKC,QAAL,CAAgB,CACZC,WAAW,CAAE,IADD,CAEZC,YAAY,CAAE,IAFF,CAGZC,YAAY,CAAE,QAHF,CAIZC,cAAc,CAAEf,MAAM,CAACgB,QAAP,CAAgB,CAAhB,CAAmB,MAAnB,CAJJ,CAKZC,kBAAkB,CAAE,IALR,CAMZC,UAAU,CAAE,IANA,CAAhB,CAUA,KAAKC,aAAL,CAAqB,EAArB,CAGA,KAAKC,MAAL,CAAc,GAAIxB,CAAAA,IAAJ,CAAS,CACnByB,GAAG,CAAE,KAAKC,YAAL,CAAkBC,IADJ,CAAT,CAAd,CAKA,KAAKC,KAAL,CAAa,GAAI9B,CAAAA,SAAJ,CAAc,CACvB+B,UAAU,CAAE,OADW,CAEvBJ,GAAG,CAAE,KAAKC,YAAL,CAAkBE,KAFA,CAGvBE,OAAO,CAAE,KAAKJ,YAAL,CAAkBI,OAHJ,CAAd,CAAb,CAKH,C,sEAiIOC,I,CAAoB,CACxB,GAAI,CAAC,KAAKR,aAAL,CAAmBS,KAAxB,CAA+B,CAC3B,KAAKT,aAAL,CAAmBS,KAAnB,CAA2B,EAA3B,CACH,CAGD,GAAI,CAACD,IAAI,CAACE,KAAV,CAAiB,CACb,GAAI,KAAKC,UAAL,CAAgBC,KAAhB,GAA0B,IAA9B,CAAoC,CAChCC,OAAO,CAACC,KAAR,CAAc,8BAAd,EACH,CAED,MAAO,KAAP,CACH,CAGD,GAAIN,IAAI,CAACO,GAAL,EAAY,MAAOP,CAAAA,IAAI,CAACO,GAAZ,GAAoB,QAApC,CAA8C,CAC1C,GAAIA,CAAAA,GAAG,CAAGP,IAAI,CAACO,GAAL,CAASA,GAAnB,CACA,GAAIC,CAAAA,SAAS,CAAGR,IAAI,CAACO,GAAL,CAASC,SAAT,EAAsB,EAAtC,CAEA,GAAI/B,MAAM,CAACgC,GAAP,CAAW,KAAKN,UAAL,CAAgBJ,OAA3B,CAAoC,OAApC,CAAJ,CAAkD,CAE9C,MAAOC,CAAAA,IAAI,CAACO,GAAZ,CAGA,GAAIA,GAAJ,CAAS,CACLP,IAAI,CAACO,GAAL,CAAWA,GAAX,CACH,CAGDP,IAAI,CAACQ,SAAL,CAAiBE,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBX,IAAI,CAACQ,SAAvB,CAAkCA,SAAlC,CAAjB,CACH,CAXD,IAWO,CAEH,GAAIR,IAAI,CAACQ,SAAL,EAAkB,MAAOR,CAAAA,IAAI,CAACQ,SAAZ,GAA0B,QAAhD,CAA0D,CACtDA,SAAS,CAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBH,SAAlB,CAA6BR,IAAI,CAACQ,SAAlC,CAAZ,CACA,MAAOR,CAAAA,IAAI,CAACQ,SAAZ,CACH,CAGDR,IAAI,CAACO,GAAL,CAAWK,IAAI,CAACC,SAAL,CAAe,CACtBC,cAAc,CAAE,CACZP,GAAG,CAAEA,GADO,CAEZC,SAAS,CAAEA,SAFC,CADM,CAAf,CAAX,CAMH,CACJ,CA9BD,IA8BO,IAAIR,IAAI,CAACQ,SAAL,EAAkB,MAAOR,CAAAA,IAAI,CAACQ,SAAZ,GAA0B,QAA5C,EAAwD/B,MAAM,CAACsC,EAAP,CAAU,KAAKZ,UAAL,CAAgBJ,OAA1B,CAAmC,OAAnC,CAA5D,CAAyG,CAE5GC,IAAI,CAACO,GAAL,CAAWK,IAAI,CAACC,SAAL,CAAe,CACtBC,cAAc,CAAE,CACZP,GAAG,CAAEP,IAAI,CAACO,GADE,CAEZC,SAAS,CAAER,IAAI,CAACQ,SAFJ,CADM,CAAf,CAAX,CAOA,MAAOR,CAAAA,IAAI,CAACQ,SAAZ,CACH,CAGD,KAAKhB,aAAL,CAAmBS,KAAnB,CAAyBe,IAAzB,CAA8BhB,IAA9B,EAEA,MAAO,KAAP,CACH,C,0CAQQC,K,CAA4B,gBACjCA,KAAK,CAACgB,GAAN,CAAU,SAAAjB,IAAI,CAAI,CACd,KAAI,CAACkB,OAAL,CAAalB,IAAb,EACA,MAAOA,CAAAA,IAAP,CACH,CAHD,EAKA,MAAO,KAAP,CACH,C,gDASWmB,G,CAAaC,K,CAAqB,CAC1C,GAAI,CAAC,KAAK5B,aAAL,CAAmBgB,SAAxB,CAAmC,CAC/B,KAAKhB,aAAL,CAAmBgB,SAAnB,CAA+B,EAA/B,CACH,CAED,KAAKhB,aAAL,CAAmBgB,SAAnB,CAA6BW,GAA7B,EAAoCC,KAApC,CAEA,MAAO,KAAP,CACH,C,kDAQYZ,S,CAAyB,CAClC,GAAI,CAAC,KAAKhB,aAAL,CAAmBgB,SAAxB,CAAmC,CAC/B,KAAKhB,aAAL,CAAmBgB,SAAnB,CAA+BA,SAA/B,CACA,MAAO,KAAP,CACH,CAED,KAAKhB,aAAL,CAAmBgB,SAAnB,CAA+BE,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkB,KAAKnB,aAAL,CAAmBgB,SAArC,CAAgDA,SAAhD,CAA/B,CAEA,MAAO,KAAP,CACH,C,gDAOWW,G,CAAsB,CAC9B,GAAI,CAAC,KAAK3B,aAAL,CAAmBgB,SAAxB,CAAmC,CAC/B,MAAO,KAAP,CACH,CAED,MAAO,MAAKhB,aAAL,CAAmBgB,SAAnB,CAA6BW,GAA7B,GAAqC,IAA5C,CACH,C,mDAMsB,CACnB,MAAO,MAAK3B,aAAL,CAAmBgB,SAAnB,EAAgC,EAAvC,CACH,C,wDAQeR,I,CAAcmB,G,CAAsB,CAChD,GAAI1C,MAAM,CAACgC,GAAP,CAAW,KAAKN,UAAL,CAAgBJ,OAA3B,CAAoC,OAApC,CAAJ,CAAkD,CAC9C,GAAIC,IAAI,CAACQ,SAAT,CAAoB,CAChB,MAAOR,CAAAA,IAAI,CAACQ,SAAL,CAAeW,GAAf,GAAuB,IAA9B,CACH,CACJ,CAJD,IAIO,IAAInB,IAAI,CAACO,GAAT,CAAc,CACjB,GAAI,CACA,GAAIA,CAAAA,GAAG,CAAG,EAAV,CACA,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CAEA,GAAI,MAAOR,CAAAA,IAAI,CAACO,GAAZ,GAAoB,QAAxB,CAAkC,CAC9BA,GAAG,CAAGK,IAAI,CAACS,KAAL,CAAWrB,IAAI,CAACO,GAAhB,CAAN,CACH,CAED,GAAIA,GAAG,CAACO,cAAR,CAAwB,CACpBN,SAAS,CAAGD,GAAG,CAACO,cAAJ,CAAmBN,SAAnB,EAAgC,EAA5C,CACH,CAED,MAAOA,CAAAA,SAAS,CAACW,GAAD,CAAT,EAAkB,IAAzB,CACH,CAAC,MAAOG,CAAP,CAAU,CAAE,CACjB,CAED,MAAO,KAAP,CACH,C,0DAWgBtB,I,CAAsB,CACnC,GAAIvB,MAAM,CAACgC,GAAP,CAAW,KAAKN,UAAL,CAAgBJ,OAA3B,CAAoC,OAApC,CAAJ,CAAkD,CAC9C,MAAOC,CAAAA,IAAI,CAACQ,SAAL,EAAkB,EAAzB,CACH,CAED,GAAIR,IAAI,CAACO,GAAT,CAAc,CACV,GAAI,CACA,GAAIA,CAAAA,GAAG,CAAG,EAAV,CAEA,GAAI,MAAOP,CAAAA,IAAI,CAACO,GAAZ,GAAoB,QAAxB,CAAkC,CAC9BA,GAAG,CAAGK,IAAI,CAACS,KAAL,CAAWrB,IAAI,CAACO,GAAhB,CAAN,CACH,CAED,GAAIA,GAAG,CAACO,cAAR,CAAwB,CACpB,MAAOP,CAAAA,GAAG,CAACO,cAAJ,CAAmBN,SAAnB,EAAgC,EAAvC,CACH,CAED,MAAOD,CAAAA,GAAG,CAACC,SAAJ,EAAiB,EAAxB,CACH,CAAC,MAAOc,CAAP,CAAU,CAAE,CACjB,CAED,MAAO,EAAP,CACH,C,sCASMC,O,CAAiBC,Q,CAAyC,CAC7D,GAAIC,CAAAA,KAAa,CAAGC,OAAO,CAACC,IAAR,CAAa,CAAb,CAApB,CAEA,GAAIF,KAAK,EAAID,QAAT,EAAqBC,KAAK,GAAKF,OAAnC,CAA4C,CACxCE,KAAK,CAAGC,OAAO,CAACC,IAAR,CAAa,CAAb,GAAmB,EAA3B,CACAH,QAAQ,CAACC,KAAD,CAAR,CACH,CAED,MAAO,KAAP,CACH,C,4CAUSG,Q,CAAkBC,S,CAA8B,CACtD,MAAO,IAAInD,CAAAA,SAAJ,CAAckD,QAAd,CAAwBC,SAAxB,CAAmC,KAAKlC,YAAL,CAAkBE,KAArD,CAAP,CACH,C,2QASO,KAAKb,QAAL,CAAcE,YAAd,GAA+B,IAA/B,EACK,KAAKF,QAAL,CAAcO,UAAd,GAA6B,IAA7B,EAAqC,KAAKP,QAAL,CAAcM,kBAAd,GAAqC,I,wFAI7EX,CAAAA,OAAO,CAACO,YAAR,CAAqB,KAAKF,QAAL,CAAcG,YAAnC,CAAiD,KAAKH,QAAL,CAAcI,cAA/D,EACD0C,KADC,CACK,SAAAC,GAAG,CAAI,CACV1B,OAAO,CAACC,KAAR,CAAcyB,GAAd,EACH,CAHC,EAIDC,IAJC,CAII,SAAAC,MAAM,CAAI,CACZ,GAAI,CAACA,MAAL,CAAa,CACT,OACH,CAGD,GAAIC,CAAAA,OAAe,CAAG,MAAI,CAACvC,YAAL,CAAkBI,OAAxC,CACA,GAAIoC,CAAAA,MAAc,CAAGF,MAAM,CAAClC,OAA5B,CAEA,GAAI,CAACtB,MAAM,CAAC2D,KAAP,CAAaF,OAAb,CAAL,CAA4B,CACxB7B,OAAO,CAACC,KAAR,CAAe,WAAU4B,OAAQ,iCAAjC,EACA,OACH,CAED,GAAI,CAACzD,MAAM,CAAC2D,KAAP,CAAaD,MAAb,CAAL,CAA2B,CACvB9B,OAAO,CAACC,KAAR,CAAc,4CAAd,EACA,OACH,CAGD,GAAI7B,MAAM,CAAC4D,EAAP,CAAUF,MAAV,CAAkBD,OAAlB,CAAJ,CAAgC,CAC5B,GAAID,MAAM,CAACK,aAAP,GAAyB,IAAzB,EAAiC,MAAI,CAACtD,QAAL,CAAcM,kBAAd,GAAqC,IAA1E,CAAgF,CAC5E,MAAI,CAACiD,MAAL,CAAY,CACRC,OAAO,CAAG,oBAAmBL,MAAO,gCAA+BD,OAAQ,GADnE,CAAZ,EAGH,CAED,GAAI,MAAI,CAAClD,QAAL,CAAcO,UAAd,GAA6B,IAAjC,CAAuC,CACnC,MAAI,CAAC2B,OAAL,CAAa,CACThB,KAAK,CAAE,4BADE,CAETuC,QAAQ,CAAG,WAAUN,MAAO,mCAAkCD,OAAQ,GAF7D,CAGTQ,IAAI,CAAE,MAAI,CAAC/C,YAAL,CAAkB+C,IAHf,CAITnC,GAAG,CAAE0B,MAAM,CAACU,GAJH,CAKTnC,SAAS,CAAE,CACPoC,IAAI,CAAE,UADC,CALF,CAAb,EASH,CACJ,CACJ,CA3CC,C,qZAoDF,KAAKjD,YAAL,CAAkBE,K,2DACX3B,EAAE,CAAC2E,QAAH,CAAY,KAAKlD,YAAL,CAAkBE,KAA9B,C,8MAQE,CACb,GAAI,KAAKF,YAAL,CAAkBE,KAAtB,CAA6B,CACzB,MAAO3B,CAAAA,EAAE,CAAC4E,YAAH,CAAgB,KAAKnD,YAAL,CAAkBE,KAAlC,CAAP,CACH,CACJ,C,gDASW4B,K,CAA2C,IAA5BsB,CAAAA,OAA4B,2DAAV,EAAU,CACnDA,OAAO,CAAGrC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkB,KAAK9B,aAAvB,CAAsCkE,OAAtC,CAAV,CAEA,GAAItB,KAAK,CAACuB,MAAN,GAAiB,CAArB,CAAwB,CACpB,MAAO,KAAP,CACH,CAGD,GAAIC,CAAAA,IAAI,CAAG,GAAI9E,CAAAA,IAAJ,CAAS,KAAKqB,aAAL,CAAmBS,KAA5B,CAAmC8C,OAAnC,CAAX,CAGA,KAAKvD,aAAL,CAAmBS,KAAnB,CAA2BgD,IAAI,CAACC,MAAL,CAAYzB,KAAZ,GAAsB,EAAjD,CAEA,MAAO,KAAP,CACH,C,wCAOOsB,Q,CAAuB,CAC3B,GAAII,CAAAA,eAAe,CAAG,eAAiBJ,CAAAA,QAAjB,EAA4BA,QAAO,CAAC9D,WAAR,GAAwB,KAAKD,QAAL,CAAcC,WAAxF,CAGA,GAAI8D,QAAO,CAAC3D,cAAR,EAA0B,CAACf,MAAM,CAAC+E,UAAP,CAAkBL,QAAO,CAAC3D,cAA1B,CAA/B,CAA0E,CACtE,GAAI2D,QAAO,CAAC3D,cAAR,CAAyB,CAA7B,CAAgC,CAC5B,MAAO2D,CAAAA,QAAO,CAAC3D,cAAf,CACH,CAFD,IAEO,CACH2D,QAAO,CAAC3D,cAAR,CAAyBf,MAAM,CAACgB,QAAP,CAAgB0D,QAAO,CAAC3D,cAAxB,CAAwC,SAAxC,GAAsDf,MAAM,CAACgB,QAAP,CAAgB,CAAhB,CAAmB,MAAnB,CAA/E,CACH,CACJ,CAGD,KAAKL,QAAL,CAAgB0B,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkB,KAAK3B,QAAvB,CAAiC+D,QAAjC,CAAhB,CAGA,GAAII,eAAJ,CAAqB,CACjB,KAAKtD,KAAL,CAAa,GAAI9B,CAAAA,SAAJ,CAAc,CACvB+B,UAAU,CAAE,OADW,CAEvBJ,GAAG,CAAE,KAAKC,YAAL,CAAkBE,KAFA,CAGvBE,OAAO,CAAE,KAAKJ,YAAL,CAAkBI,OAHJ,CAAd,CAAb,CAKH,CAED,MAAO,KAAP,CACH,C,wCAUOsD,U,CAA2B5B,K,CAAoD,IAArCsB,CAAAA,OAAqC,2DAAnB,EAAmB,CACnFA,OAAO,CAAGrC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkB,KAAK9B,aAAvB,CAAsCkE,OAAtC,CAAV,CAEA,GAAItB,KAAK,CAACuB,MAAN,GAAiB,CAArB,CAAwB,CACpB,MAAOK,CAAAA,UAAP,CACH,CAGD,GAAIJ,CAAAA,IAAI,CAAG,GAAI9E,CAAAA,IAAJ,CAASkF,UAAT,CAAqBN,OAArB,CAAX,CAGA,MAAOE,CAAAA,IAAI,CAACC,MAAL,CAAYzB,KAAZ,GAAsB,EAA7B,CACH,C,wHAYYsB,O,wKACF,GAAIO,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACpC,GAAIC,CAAAA,QAAQ,CAAG,CACXvD,KAAK,CAAE,CAAC,UAAY,MAAI,CAACP,YAAL,CAAkB+D,IAA/B,EAAqCC,IAArC,EADI,CAEXC,MAAM,CAAE,iCAFG,CAGXC,YAAY,CAAE,MAAI,CAAClE,YAAL,CAAkB+C,IAHrB,CAAf,CAOAK,OAAO,CAAGrC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkB8C,QAAlB,CAA4BV,OAA5B,CAAV,CAGAzE,QAAQ,CAACiE,MAAT,CAAgBQ,OAAhB,CAAyB,SAAChB,GAAD,CAAM+B,QAAN,CAAmB,CACxC,GAAI/B,GAAJ,CAAS,CACLyB,MAAM,CAACzB,GAAD,CAAN,CACA,OACH,CAEDwB,OAAO,CAACO,QAAD,CAAP,CACH,CAPD,EAQH,CAnBM,C,4KA4BL1C,K,CAAqB,CACvBA,KAAK,CAAG2C,UAAU,CAAC3C,KAAD,CAAlB,CAEA,GAAIA,KAAK,EAAIA,KAAK,CAAG,GAAjB,EAAwBA,KAAK,EAAI,CAArC,CAAwC,CACpC,KAAK4C,MAAL,CAAc5C,KAAd,CACH,CAED,MAAO,KAAP,CACH,C,8PAOG,GAAI,KAAK4C,MAAT,CAAiB,CACb,KAAKxE,aAAL,CAAmByE,KAAnB,CAA2B,KAAKD,MAAhC,CACH,C,KAGG,KAAKhF,QAAL,CAAcE,YAAd,GAA+B,I,kDACzB,MAAKA,YAAL,GACD4C,KADC,CACK,UAAM,CAAE,CADb,C,QAINoC,M,CAAS,KAAK1E,a,CAGlBa,OAAO,CAAC8D,GAAR,CAAYvD,IAAI,CAACC,SAAL,CAAeqD,MAAf,CAAuB,IAAvB,CAA6B,IAA7B,CAAZ,EAGA,KAAK1E,aAAL,CAAqB,EAArB,C,iCAEO0E,M,uQAYCvB,G,yLAAaI,O,kDAAkB,E,CAAIqB,Q,kDAAoB,I,CAE/DrB,OAAO,CAAGrC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkB,CACxB0D,IAAI,CAAE,IADkB,CAAlB,CAEPtB,OAFO,CAAV,C,KAKIqB,QAAQ,EAAIA,QAAQ,CAAG,C,2BACnBE,W,CAAkC,KAAKzE,KAAL,CAAW0E,GAAX,CAAe5B,GAAf,C,KAElC2B,W,2DACOA,W,0CAKRlG,GAAG,CAACuE,GAAD,CAAMI,OAAN,CAAH,CACFf,IADE,CACG,SAAA8B,QAAQ,CAAI,CACd,GAAIM,QAAQ,EAAIA,QAAQ,CAAG,CAA3B,CAA8B,CAC1B,MAAI,CAACvE,KAAL,CAAW2E,GAAX,CAAe7B,GAAf,CAAoBmB,QAAQ,CAACW,IAA7B,CAAmC,CAC/BC,MAAM,CAAEN,QAAQ,CAAG,IADY,CAAnC,EAGH,CAED,MAAON,CAAAA,QAAQ,CAACW,IAAhB,CACH,CATE,C,iLA9lBc,CACrB,GAAI1E,CAAAA,OAAe,CAAG2B,OAAO,CAACiD,GAAR,CAAYC,cAAZ,EAA8B,OAApD,CAGA,GAAI,CAACnG,MAAM,CAAC2D,KAAP,CAAarC,OAAb,CAAL,CAA4B,CACxBA,OAAO,EAAI,IAAX,CAGA,GAAI,CAACtB,MAAM,CAAC2D,KAAP,CAAarC,OAAb,CAAD,EAA0B2B,OAAO,CAACiD,GAAR,CAAYE,YAAZ,GAA6B,GAA3D,CAAgE,CAC5DxE,OAAO,CAACC,KAAR,CAAe,2BAA0BP,OAAQ,EAAjD,EACAA,OAAO,CAAG,OAAV,CACH,CACJ,CAGD,GAAIH,CAAAA,IAAY,CAAG,CACfG,OAAO,CAAEA,OADM,CAEf+E,KAAK,CAAEpD,OAAO,CAACiD,GAAR,CAAYI,YAFJ,CAGfC,SAAS,CAAE,EAHI,CAIfC,eAAe,CAAEvD,OAAO,CAACiD,GAAR,CAAYO,uBAJd,CAKfC,wBAAwB,CAAEzD,OAAO,CAACiD,GAAR,CAAYS,iCALvB,CAMfC,YAAY,CAAEtB,UAAU,CAACrC,OAAO,CAACiD,GAAR,CAAYW,oBAAb,CANT,CAOfC,WAAW,CAAE7D,OAAO,CAACiD,GAAR,CAAYa,kBAPV,CAQfC,oBAAoB,CAAE/D,OAAO,CAACiD,GAAR,CAAYe,4BARnB,CASftF,KAAK,CAAEsB,OAAO,CAACiD,GAAR,CAAYE,YAAZ,GAA6B,GATrB,CAAnB,CAaA,GAAInD,OAAO,CAACiD,GAAR,CAAYgB,IAAZ,EAAoB/F,IAAI,CAACkF,KAA7B,CAAoC,CAChC,GAAIc,CAAAA,OAAe,CAAGlE,OAAO,CAACiD,GAAR,CAAYgB,IAAZ,EAAoB,EAA1C,CAEA,GAAIX,CAAAA,SAAS,CAAGxG,IAAI,CAAC+E,OAAL,CAAaqC,OAAb,CAAsB,SAAtB,CAAiC,qBAAjC,CAAwD,UAAYnH,MAAM,CAACoH,KAAP,CAAa9F,OAAb,CAApE,CACZ,0BADY,CACgB,QADhB,CAC0BH,IAAI,CAACkF,KAD/B,CACsC,YADtC,CAAhB,CAGA,GAAI,CACA5G,EAAE,CAAC4H,QAAH,CAAYd,SAAZ,EACApF,IAAI,CAACoF,SAAL,CAAiBA,SAAjB,CACH,CAAC,MAAO1D,CAAP,CAAU,CACR,GAAII,OAAO,CAACiD,GAAR,CAAYE,YAAZ,GAA6B,GAAjC,CAAsC,CAClCxE,OAAO,CAACC,KAAR,CAAe,8BAA6B0E,SAAU,GAAtD,EACH,CACJ,CACJ,CAED,MAAOpF,CAAAA,IAAP,CACH,C,uCAMyB,CACtB,GAAIoF,CAAAA,SAAS,CAAG,KAAK7E,UAAL,CAAgB6E,SAAhC,CAEA,GAAI,CAACA,SAAL,CAAgB,CACZ,MAAO,EAAP,CACH,CAED,MAAO9G,CAAAA,EAAE,CAAC6H,YAAH,CAAgBf,SAAhB,CAA2B,CAACgB,MAAM,CAAE,KAAT,CAA3B,GAA+C,EAAtD,CACH,C,iCAMmB,CAChB,GAAItE,OAAO,CAACC,IAAR,CAAaqB,MAAb,CAAsB,CAA1B,CAA6B,CACzB,MAAOtB,CAAAA,OAAO,CAACC,IAAR,CAAa,CAAb,GAAmB,EAA1B,CACH,CAED,MAAOD,CAAAA,OAAO,CAACC,IAAR,CAAa,CAAb,GAAmB,EAA1B,CACH,C,qCAMuB,CACpB,GAAI,KAAKsE,YAAL,EAAqB,KAAKA,YAAL,CAAkBhG,KAA3C,CAAkD,CAC9C,MAAO,MAAKgG,YAAL,CAAkBhG,KAAlB,CAAwB+C,MAA/B,CACH,CAED,MAAO,EAAP,CACH,C,wCAO0B,CACvB,MAAO,MAAKxD,aAAZ,CACH,C,wCAM0B,CACvB,GAAI0G,CAAAA,QAAQ,CAAGxE,OAAO,CAACiD,GAAR,CAAYwB,qBAA3B,CACA,GAAIC,CAAAA,QAAQ,CAAG1E,OAAO,CAACiD,GAAR,CAAY0B,wBAA3B,CAEA,GAAID,QAAQ,EAAI,KAAKpH,QAAL,CAAcC,WAAd,GAA8B,IAA9C,CAAoD,CAChDiH,QAAQ,CAAG1H,IAAI,CAAC+E,OAAL,CAAa/E,IAAI,CAAC8H,IAAL,CAAU/H,EAAE,CAACgI,MAAH,EAAV,CAAuBH,QAAvB,CAAb,CAAX,CACH,CAED,MAAO,CACH1C,IAAI,CAAEhC,OAAO,CAACiD,GAAR,CAAY6B,oBADf,CAEHzG,OAAO,CAAE2B,OAAO,CAACiD,GAAR,CAAY8B,uBAFlB,CAGHC,GAAG,CAAEhF,OAAO,CAACiD,GAAR,CAAYgC,mBAHd,CAIHP,QAAQ,CAAEA,QAJP,CAKHxG,IAAI,CAAE8B,OAAO,CAACiD,GAAR,CAAYiC,oBALf,CAMH/G,KAAK,CAAEqG,QANJ,CAOHxD,IAAI,CAAElE,IAAI,CAAC8H,IAAL,CAAU5E,OAAO,CAAChC,GAAR,EAAV,CAAyB,UAAzB,CAPH,CAAP,CASH,C,oBAwfLmH,MAAM,CAACC,OAAP,CAAiB,GAAIlI,CAAAA,IAAJ,EAAjB","sourcesContent":["// @flow\n\nconst CacheConf = require('cache-conf');\nconst Conf = require('conf');\nconst fs = require('fs-extra');\nconst Fuse = require('fuse.js');\nconst got = require('got');\nconst moment = require('moment');\nconst notifier = require('node-notifier');\nconst os = require('os');\nconst path = require('path');\nconst semver = require('semver');\n\nconst FileCache = require('./file-cache');\nconst updater = require('./updater');\n\n/**\n * Hugo\n */\nclass Hugo {\n    /**\n     * FuseJS defaults\n     * @see https://github.com/krisk/fuse#options\n     * @type {Object}\n     */\n    _fuseDefaults: Object;\n\n    /**\n     * Hugo options\n     * @type {Object}\n     */\n    _options: Object;\n\n    /**\n     * Output buffer\n     * @type {Object}\n     */\n    _outputBuffer: Object;\n\n    /**\n     * Refresh (rerun) interval in seconds\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @type {number|null}\n     */\n    _rerun: ?number;\n\n    /**\n     * Cache store\n     * @see https://www.npmjs.com/package/cache-conf\n     * @type {CacheConf}\n     */\n    cache: CacheConf;\n\n    /**\n     * Configuration store\n     * @see https://www.npmjs.com/package/conf\n     * @type {Conf}\n     */\n    config: Conf;\n\n    /**\n     * Hugo constructor\n     * @constructor\n     */\n    constructor() {\n        // Set defaults for FuseJS\n        this._fuseDefaults = {\n            keys: ['title'],\n            threshold: 0.4\n        };\n\n        // Save options\n        this._options = {\n            useTmpCache: true,\n            checkUpdates: true,\n            updateSource: 'packal',\n            updateInterval: moment.duration(1, 'days'),\n            updateNotification: true,\n            updateItem: true\n        };\n\n        // Initialize output buffer\n        this._outputBuffer = {};\n\n        // Configure config store\n        this.config = new Conf({\n            cwd: this.workflowMeta.data\n        });\n\n        // Configure cache store\n        this.cache = new CacheConf({\n            configName: 'cache',\n            cwd: this.workflowMeta.cache,\n            version: this.workflowMeta.version\n        });\n    }\n\n    /**\n     * Alfred metadata\n     * @return {Object}\n     */\n    get alfredMeta(): Object {\n        let version: string = process.env.alfred_version || '0.0.0';\n\n        // Check Alfred version for missing patch version (e.g. 3.4 is invalid, should be 3.4.0)\n        if (!semver.valid(version)) {\n            version += '.0';\n\n            // Check if adding .0 to the end makes a valid version string (eg. in case of 3.4)\n            if (!semver.valid(version) && process.env.alfred_debug === '1') {\n                console.error(`Invalid Alfred version: ${version}`);\n                version = '0.0.0';\n            }\n        }\n\n        // Gather environment information\n        let data: Object = {\n            version: version,\n            theme: process.env.alfred_theme,\n            themeFile: '',\n            themeBackground: process.env.alfred_theme_background,\n            themeSelectionBackground: process.env.alfred_theme_selection_background,\n            themeSubtext: parseFloat(process.env.alfred_theme_subtext),\n            preferences: process.env.alfred_preferences,\n            preferencesLocalHash: process.env.alfred_preferences_localhash,\n            debug: process.env.alfred_debug === '1'\n        };\n\n        // Find and load curent Alfred theme file\n        if (process.env.HOME && data.theme) {\n            let homedir: string = process.env.HOME || '';\n\n            let themeFile = path.resolve(homedir, 'Library', 'Application Support', 'Alfred ' + semver.major(version),\n                'Alfred.alfredpreferences', 'themes', data.theme, 'theme.json');\n\n            try {\n                fs.statSync(themeFile);\n                data.themeFile = themeFile;\n            } catch (e) {\n                if (process.env.alfred_debug === '1') {\n                    console.error(`Could not find theme file \"${themeFile}\"`);\n                }\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * Alfred theme\n     * @return {Object}\n     */\n    get alfredTheme(): Object {\n        let themeFile = this.alfredMeta.themeFile;\n\n        if (!themeFile) {\n            return {};\n        }\n\n        return fs.readJsonSync(themeFile, {throws: false}) || {};\n    }\n\n    /**\n     * Alfred user input\n     * @return {string}\n     */\n    get input(): string {\n        if (process.argv.length > 3) {\n            return process.argv[3] || '';\n        }\n\n        return process.argv[2] || '';\n    }\n\n    /**\n     * Number of Alfred items in the current output buffer\n     * @return {number}\n     */\n    get itemCount(): number {\n        if (this.outputBuffer && this.outputBuffer.items) {\n            return this.outputBuffer.items.length;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Current output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @return {Object} Object to be output and interpreted by Alfred\n     */\n    get outputBuffer(): Object {\n        return this._outputBuffer;\n    }\n\n    /**\n     * Workflow metadata\n     * @return {Object}\n     */\n    get workflowMeta(): Object {\n        let cacheDir = process.env.alfred_workflow_cache;\n        let bundleId = process.env.alfred_workflow_bundleid;\n\n        if (bundleId && this._options.useTmpCache === true) {\n            cacheDir = path.resolve(path.join(os.tmpdir(), bundleId));\n        }\n\n        return {\n            name: process.env.alfred_workflow_name,\n            version: process.env.alfred_workflow_version,\n            uid: process.env.alfred_workflow_uid,\n            bundleId: bundleId,\n            data: process.env.alfred_workflow_data,\n            cache: cacheDir,\n            icon: path.join(process.cwd(), 'icon.png')\n        };\n    }\n\n    /**\n     * Add item to output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @param {Object} item Item to add\n     * @return {Hugo}\n     */\n    addItem(item: Object): Hugo {\n        if (!this._outputBuffer.items) {\n            this._outputBuffer.items = [];\n        }\n\n        // Require item title\n        if (!item.title) {\n            if (this.alfredMeta.debug === true) {\n                console.error('Item skipped, missing title.');\n            }\n\n            return this;\n        }\n\n        // Parse item variables\n        if (item.arg && typeof item.arg === 'object') {\n            let arg = item.arg.arg;\n            let variables = item.arg.variables || {};\n\n            if (semver.gte(this.alfredMeta.version, '3.4.1')) {\n                // Delete item arg\n                delete item.arg;\n\n                // Only add arg when there is one\n                if (arg) {\n                    item.arg = arg;\n                }\n\n                // Item variables\n                item.variables = Object.assign({}, item.variables, variables);\n            } else {\n                // Merge item.variables (new style) with item.arg.variables (old style)\n                if (item.variables && typeof item.variables === 'object') {\n                    variables = Object.assign({}, variables, item.variables);\n                    delete item.variables;\n                }\n\n                // Build item arg (old style)\n                item.arg = JSON.stringify({\n                    alfredworkflow: {\n                        arg: arg,\n                        variables: variables\n                    }\n                });\n            }\n        } else if (item.variables && typeof item.variables === 'object' && semver.lt(this.alfredMeta.version, '3.4.1')) {\n            // Build item arg (old style) with new style item variables\n            item.arg = JSON.stringify({\n                alfredworkflow: {\n                    arg: item.arg,\n                    variables: item.variables\n                }\n            });\n\n            delete item.variables;\n        }\n\n        // Add item to output buffer\n        this._outputBuffer.items.push(item);\n\n        return this;\n    }\n\n    /**\n     * Add items to output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @param {Array.<Object>} items List of items to add\n     * @return {Hugo}\n     */\n    addItems(items: Array<Object>): Hugo {\n        items.map(item => {\n            this.addItem(item);\n            return item;\n        });\n\n        return this;\n    }\n\n    /**\n     * Add session variable to output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @param {string} key Variable key\n     * @param {string} value Variable value\n     * @return {Hugo}\n     */\n    addVariable(key: string, value: string): Hugo {\n        if (!this._outputBuffer.variables) {\n            this._outputBuffer.variables = {};\n        }\n\n        this._outputBuffer.variables[key] = value;\n\n        return this;\n    }\n\n    /**\n     * Add session variables to output buffer\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json/\n     * @param {Object} variables List of variables to add\n     * @return {Hugo}\n     */\n    addVariables(variables: Object): Hugo {\n        if (!this._outputBuffer.variables) {\n            this._outputBuffer.variables = variables;\n            return this;\n        }\n\n        this._outputBuffer.variables = Object.assign({}, this._outputBuffer.variables, variables);\n\n        return this;\n    }\n\n    /**\n     * Get session variable from output buffer\n     * @param {string} key Variable key\n     * @return {string|null} Variable value\n     */\n    getVariable(key: string): ?string {\n        if (!this._outputBuffer.variables) {\n            return null;\n        }\n\n        return this._outputBuffer.variables[key] || null;\n    }\n\n    /**\n     * Get session variables from output buffer\n     * @return {Object} Variables\n     */\n    getVariables(): Object {\n        return this._outputBuffer.variables || {};\n    }\n\n    /**\n     * Get item variable\n     * @param {Object} item\n     * @param {string} key Variable key\n     * @return {string|null} Variable value\n     */\n    getItemVariable(item: Object, key: string): ?string {\n        if (semver.gte(this.alfredMeta.version, '3.4.1')) {\n            if (item.variables) {\n                return item.variables[key] || null;\n            }\n        } else if (item.arg) {\n            try {\n                let arg = {};\n                let variables = {};\n\n                if (typeof item.arg === 'string') {\n                    arg = JSON.parse(item.arg);\n                }\n\n                if (arg.alfredworkflow) {\n                    variables = arg.alfredworkflow.variables || {};\n                }\n\n                return variables[key] || null;\n            } catch (e) {}\n        }\n\n        return null;\n    }\n\n    /**\n     * Get item variables\n     *\n     * As of Alfred 3.4.1 item variables are handled differently (properly). This method makes it easier to get the\n     * variables of an item without having to deal with different versions.\n     *\n     * @param {Object} item\n     * @return {Object} Item variables\n     */\n    getItemVariables(item: Object): Object {\n        if (semver.gte(this.alfredMeta.version, '3.4.1')) {\n            return item.variables || {};\n        }\n\n        if (item.arg) {\n            try {\n                let arg = {};\n\n                if (typeof item.arg === 'string') {\n                    arg = JSON.parse(item.arg);\n                }\n\n                if (arg.alfredworkflow) {\n                    return arg.alfredworkflow.variables || {};\n                }\n\n                return arg.variables || {};\n            } catch (e) {}\n        }\n\n        return {};\n    }\n\n    /**\n     * Run a callback when first script argument matches keyword. Callback will have third argument as query parameter.\n     * @example node index.js myaction \"my query\"\n     * @param {string} keyword Action name\n     * @param {Function} callback Callback to execute when query matches action name\n     * @return {Hugo}\n     */\n    action(keyword: string, callback: (query: string) => void): Hugo {\n        let query: string = process.argv[2];\n\n        if (query && callback && query === keyword) {\n            query = process.argv[3] || '';\n            callback(query);\n        }\n\n        return this;\n    }\n\n    /**\n     * Cache processed data\n     * This allows you to read and process the data once, then storing it in cache until the file has changed again.\n     *\n     * @param {string} filepath File path\n     * @param {string} cacheName Cache name (must be unique for each file)\n     * @return {FileCache}\n     */\n    cacheFile(filePath: string, cacheName: string): FileCache {\n        return new FileCache(filePath, cacheName, this.workflowMeta.cache);\n    }\n\n    /**\n     * Check for updates and notify the user\n     * @async\n     * @return {Promise}\n     */\n    async checkUpdates() {\n        // No need to check if we're not showing anything, duh.\n        if (this._options.checkUpdates !== true ||\n                (this._options.updateItem !== true && this._options.updateNotification !== true)) {\n            return;\n        }\n\n        await updater.checkUpdates(this._options.updateSource, this._options.updateInterval)\n            .catch(err => {\n                console.error(err);\n            })\n            .then(result => {\n                if (!result) {\n                    return;\n                }\n\n                // Version information\n                let current: string = this.workflowMeta.version;\n                let latest: string = result.version;\n\n                if (!semver.valid(current)) {\n                    console.error(`Version ${current} is not a valid version number.`);\n                    return;\n                }\n\n                if (!semver.valid(latest)) {\n                    console.error('Could not determine latest version number.');\n                    return;\n                }\n\n                // Display notification\n                if (semver.gt(latest, current)) {\n                    if (result.checkedOnline === true && this._options.updateNotification === true) {\n                        this.notify({\n                            message: `Workflow version ${latest} available. Current version: ${current}.`\n                        });\n                    }\n\n                    if (this._options.updateItem === true) {\n                        this.addItem({\n                            title: 'Workflow update available!',\n                            subtitle: `Version ${latest} is available. Current version: ${current}.`,\n                            icon: this.workflowMeta.icon,\n                            arg: result.url,\n                            variables: {\n                                task: 'wfUpdate'\n                            }\n                        });\n                    }\n                }\n            });\n    }\n\n    /**\n     * Clear cache\n     * @async\n     * @return {Promise}\n     */\n    async clearCache() {\n        if (this.workflowMeta.cache) {\n            return fs.emptyDir(this.workflowMeta.cache);\n        }\n    }\n\n    /**\n     * Clear cache (sync)\n     * @return {void}\n     */\n    clearCacheSync() {\n        if (this.workflowMeta.cache) {\n            return fs.emptyDirSync(this.workflowMeta.cache);\n        }\n    }\n\n    /**\n     * Filter added items (output buffer) with fuse.js\n     * @see http://fusejs.io\n     * @param {string} query Search string\n     * @param {Object} options fuse.js options\n     * @return {Hugo}\n     */\n    filterItems(query: string, options: Object = {}): Hugo {\n        options = Object.assign({}, this._fuseDefaults, options);\n\n        if (query.length === 0) {\n            return this;\n        }\n\n        // Create fuse.js fuzzy search object\n        let fuse = new Fuse(this._outputBuffer.items, options);\n\n        // Set output buffer to matching items\n        this._outputBuffer.items = fuse.search(query) || [];\n\n        return this;\n    }\n\n    /**\n     * Set Hugo options\n     * @param {Object} options Options to set\n     * @return {Hugo}\n     */\n    options(options: Object): Hugo {\n        let cacheDirChanged = 'useTmpCache' in options && options.useTmpCache !== this._options.useTmpCache;\n\n        // Convert updateInterval to moment.Duration object\n        if (options.updateInterval && !moment.isDuration(options.updateInterval)) {\n            if (options.updateInterval < 1) {\n                delete options.updateInterval;\n            } else {\n                options.updateInterval = moment.duration(options.updateInterval, 'seconds') || moment.duration(1, 'days');\n            }\n        }\n\n        // Update options\n        this._options = Object.assign({}, this._options, options);\n\n        // Update cache dir\n        if (cacheDirChanged) {\n            this.cache = new CacheConf({\n                configName: 'cache',\n                cwd: this.workflowMeta.cache,\n                version: this.workflowMeta.version\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Filter list of candidates with fuse.js\n     * @see http://fusejs.io\n     * @param {Array.<Object>} candidates Input data\n     * @param {string} query Search string\n     * @param {Object} options fuse.js options\n     * @return {Array.<Object>}\n     */\n    matches(candidates: Array<Object>, query: string, options: Object = {}): Array<Object> {\n        options = Object.assign({}, this._fuseDefaults, options);\n\n        if (query.length === 0) {\n            return candidates;\n        }\n\n        // Create fuse.js fuzzy search object\n        let fuse = new Fuse(candidates, options);\n\n        // Return results\n        return fuse.search(query) || [];\n    }\n\n    /**\n     * Send a notification\n     *\n     * Notification title defaults to the Workflow name, or when not available to 'Alfred'. You can adjust all the options\n     * that node-notifier supports. Please see their documentation for available options.\n     *\n     * @see https://github.com/mikaelbr/node-notifier\n     * @param {Object} options Notification options\n     * @return {Promise} Notifier response\n     */\n    async notify(options: Object) {\n        return new Promise((resolve, reject) => {\n            let defaults = {\n                title: ('Alfred ' + this.workflowMeta.name).trim(),\n                sender: 'com.runningwithcrayons.Alfred-3',\n                contentImage: this.workflowMeta.icon\n            };\n\n            // Set options\n            options = Object.assign({}, defaults, options);\n\n            // Notify\n            notifier.notify(options, (err, response) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n\n                resolve(response);\n            });\n        });\n    }\n\n    /**\n     * Set rerun parameter\n     * @see https://www.alfredapp.com/help/workflows/inputs/script-filter/json\n     * @param {number} value Interval to rerun the script when idle\n     * @return {Hugo}\n     */\n    rerun(value: number): Hugo {\n        value = parseFloat(value);\n\n        if (value && value > 0.1 && value <= 5) {\n            this._rerun = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Flush the output buffer so Alfred shows our items\n     * @async\n     */\n    async feedback() {\n        if (this._rerun) {\n            this._outputBuffer.rerun = this._rerun;\n        }\n\n        // Check for updates\n        if (this._options.checkUpdates === true) {\n            await this.checkUpdates()\n                .catch(() => {});\n        }\n\n        let output = this._outputBuffer;\n\n        // Output JSON\n        console.log(JSON.stringify(output, null, '\\t'));\n\n        // Reset output buffer\n        this._outputBuffer = {};\n\n        return output;\n    }\n\n    /**\n     * Fetch url and parse JSON. Useful for REST APIs.\n     * @see https://www.npmjs.com/package/got\n     * @param {string} url Url to request\n     * @param {Object} options http.request options\n     * @param {number|null} cacheAge Cache lifetime (in seconds), above 0 to enable or null to disable.\n     * @return {Object|string}\n     * @async\n     */\n    async fetch(url: string, options: Object = {}, cacheAge: ?number = null): Object|string {\n        // Set default options\n        options = Object.assign({}, {\n            json: true\n        }, options);\n\n        // Check cache for a hit\n        if (cacheAge && cacheAge > 0) {\n            let cacheResult: Object|string|null = this.cache.get(url);\n\n            if (cacheResult) {\n                return cacheResult;\n            }\n        }\n\n        // Do request\n        return got(url, options)\n            .then(response => {\n                if (cacheAge && cacheAge > 0) {\n                    this.cache.set(url, response.body, {\n                        maxAge: cacheAge * 1000\n                    });\n                }\n\n                return response.body;\n            });\n    }\n}\n\nmodule.exports = new Hugo();\n"],"file":"index.js"}