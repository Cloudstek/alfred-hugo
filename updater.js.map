{"version":3,"sources":["updater.js.flow"],"names":["CacheConf","require","moment","readPkg","latestVersion","got","Updater","cache","configName","cwd","process","env","alfred_workflow_cache","version","alfred_workflow_version","interval","bundleId","alfred_workflow_bundleid","console","error","searchParam","encodeURIComponent","pkgUrl","catch","err","then","versionMatches","response","body","match","length","url","checkedOnline","latest","set","maxAge","as","pkg","name","source","get","toLowerCase","checkNpm","checkPackal","module","exports"],"mappings":"klBAEA,GAAMA,WAAYC,QAAQ,YAAR,CAAlB,CACA,GAAMC,QAASD,QAAQ,QAAR,CAAf,CACA,GAAME,SAAUF,QAAQ,UAAR,CAAhB,CACA,GAAMG,eAAgBH,QAAQ,gBAAR,CAAtB,CACA,GAAMI,KAAMJ,QAAQ,KAAR,CAAZ,C,GAKMK,Q,YAYF,kBAAc,4CAEV,KAAKC,KAAL,CAAa,GAAIP,UAAJ,CAAc,CACvBQ,WAAY,SADW,CAEvBC,IAAKC,QAAQC,GAAR,CAAYC,qBAFM,CAGvBC,QAASH,QAAQC,GAAR,CAAYG,uBAHE,CAAd,CAAb,CAKH,C,2JAOiBC,Q,2JAERC,Q,CAAoBN,QAAQC,GAAR,CAAYM,wB,IAEjCD,Q,yBACDE,QAAQC,KAAR,CAAc,gDAAd,E,wCAKEC,W,CAAsBC,mBAAmB,mBAAqBL,QAAxC,C,CACtBM,M,CAAkB,kEAAiEF,WAAY,O,uBAElFf,KAAK,oDAAmDW,QAAS,cAAjE,EACdO,KADc,CACR,aAAO,CAEVL,QAAQC,KAAR,CAAcK,GAAd,EACA,MAAO,MAAP,CACH,CALc,EAMdC,IANc,CAMT,kBAAY,CAEd,GAAIC,gBAAiBC,SAASC,IAAT,CAAcC,KAAd,CAAoB,0BAApB,CAArB,CAEA,GAAIH,gBAAkBA,eAAeI,MAAf,CAAwB,CAA9C,CAAiD,CAC7C,MAAO,CACHjB,QAASc,SAASC,IAAT,CAAcC,KAAd,CAAoB,0BAApB,EAAgD,CAAhD,CADN,CAEHE,IAAKT,MAFF,CAGHU,cAAe,KAHZ,CAAP,CAKH,CAED,MAAO,MAAP,CACH,CAnBc,C,QAAfC,M,eAsBJ,KAAK1B,KAAL,CAAW2B,GAAX,CAAe,uBAAf,CAAwCD,MAAxC,CAAgD,CAC5CE,OAAQpB,SAASqB,EAAT,CAAY,cAAZ,CADoC,CAAhD,EAKA,GAAIH,MAAJ,CAAY,CACRA,OAAOD,aAAP,CAAuB,IAAvB,CACH,C,gCAEMC,M,4QAQIlB,Q,KAA2BsB,I,2DAAe,I,mJAE/CA,G,iEAAalC,SAAQO,QAAQD,GAAR,EAAR,C,2CAAnB4B,G,cAGMN,G,CAAe,iCAAgCM,IAAIC,IAAK,E,wBAG3ClC,eAAciC,IAAIC,IAAlB,EACdf,KADc,CACR,aAAO,CAEVL,QAAQC,KAAR,CAAcK,GAAd,EACA,MAAO,MAAP,CACH,CALc,EAMdC,IANc,CAMT,wBAAY,CACdZ,QAASA,OADK,CAEdkB,IAAKA,GAFS,CAGdC,cAAe,KAHD,CAAZ,EANS,C,QAAfC,M,gBAaJ,KAAK1B,KAAL,CAAW2B,GAAX,CAAe,oBAAf,CAAqCD,MAArC,CAA6C,CACzCE,OAAQpB,SAASqB,EAAT,CAAY,cAAZ,CADiC,CAA7C,EAKA,GAAIH,MAAJ,CAAY,CACRA,OAAOD,aAAP,CAAuB,IAAvB,CACH,C,iCAEMC,M,8QASQM,M,CAAgBxB,Q,KAA2BsB,I,2DAAe,I,kIAErEJ,M,CAAS,KAAK1B,KAAL,CAAWiC,GAAX,CAAgB,kBAAiBD,MAAO,EAAxC,C,MAGTN,SAAW,K,uEAKVA,M,wCACOM,OAAOE,WAAP,E,+BACC,K,kBAEA,Q,mDADM,KAAKC,QAAL,CAAc3B,QAAd,CAAwBsB,GAAxB,C,0CAEA,KAAKM,WAAL,CAAiB5B,QAAjB,C,mDAOnBkB,OAAOD,aAAP,CAAuB,KAAvB,C,iCAEOC,M,oLAIfW,OAAOC,OAAP,CAAiB,GAAIvC,QAAJ,EAAjB","file":"updater.js","sourcesContent":["// @flow\n\nconst CacheConf = require('cache-conf');\nconst moment = require('moment');\nconst readPkg = require('read-pkg');\nconst latestVersion = require('latest-version');\nconst got = require('got');\n\n/**\n * Hugo Updater\n */\nclass Updater {\n    /**\n     * Cache store\n     * @see https://www.npmjs.com/package/cache-conf\n     * @type {CacheConf}\n     */\n    cache: CacheConf;\n\n    /**\n     * Hugo updater constructor\n     * @constructor\n     */\n    constructor() {\n        // Configure cache store\n        this.cache = new CacheConf({\n            configName: 'updater',\n            cwd: process.env.alfred_workflow_cache,\n            version: process.env.alfred_workflow_version\n        });\n    }\n\n    /**\n     * Check Packal for updates\n     * @param {moment.Duration} interval Update interval\n     * @async\n     */\n    async checkPackal(interval: moment.Duration): Object {\n        // Bundle ID\n        const bundleId: ?string = process.env.alfred_workflow_bundleid;\n\n        if (!bundleId) {\n            console.error('No bundle ID, not checking Packal for updates.');\n            return;\n        }\n\n        // Packal URL\n        const searchParam: string = encodeURIComponent('site:packal.org ' + bundleId);\n        const pkgUrl: string = `https://encrypted.google.com/search?sourceid=chrome&ie=UTF-8&q=${searchParam}&btnI`;\n\n        let latest = await got(`https://github.com/packal/repository/blob/master/${bundleId}/appcast.xml`)\n            .catch(err => {\n                // Set to false on failure (e.g. not found).\n                console.error(err);\n                return false;\n            })\n            .then(response => {\n                // Get version from XML\n                let versionMatches = response.body.match(/<version>(.+)<\\/version>/);\n\n                if (versionMatches && versionMatches.length > 0) {\n                    return {\n                        version: response.body.match(/<version>(.+)<\\/version>/)[1],\n                        url: pkgUrl,\n                        checkedOnline: false\n                    };\n                }\n\n                return false;\n            });\n\n        // Cache results\n        this.cache.set('latest_version_packal', latest, {\n            maxAge: interval.as('milliseconds')\n        });\n\n        // Got it from the internet!\n        if (latest) {\n            latest.checkedOnline = true;\n        }\n\n        return latest;\n    }\n\n    /**\n     * Check NPM for updates\n     * @param {moment.Duration} interval Update interval\n     * @async\n     */\n    async checkNpm(interval: moment.Duration, pkg: ?Object = null): Object {\n        // Get details from package.json\n        pkg = pkg || await readPkg(process.cwd());\n\n        // NPM URL\n        const url: string = `https://www.npmjs.com/package/${pkg.name}`;\n\n        // Check for updates\n        let latest = await latestVersion(pkg.name)\n            .catch(err => {\n                // Set to false on failure (e.g. not found).\n                console.error(err);\n                return false;\n            })\n            .then(version => ({\n                version: version,\n                url: url,\n                checkedOnline: false\n            }));\n\n        // Cache results\n        this.cache.set('latest_version_npm', latest, {\n            maxAge: interval.as('milliseconds')\n        });\n\n        // Got it from the internet!\n        if (latest) {\n            latest.checkedOnline = true;\n        }\n\n        return latest;\n    }\n\n    /**\n     * Check for updates\n     * @param {string} source Update source (npm or packal)\n     * @param {moment.Duration} interval Update interval\n     * @async\n     */\n    async checkUpdates(source: string, interval: moment.Duration, pkg: ?Object = null): Object {\n        // Get from cache\n        let latest = this.cache.get(`latest_version_${source}`);\n\n        // Don't do anything if the package wasn't found last time.\n        if (latest === false) {\n            return;\n        }\n\n        // Check for updates online\n        if (!latest) {\n            switch (source.toLowerCase()) {\n                case 'npm':\n                    return this.checkNpm(interval, pkg);\n                case 'packal':\n                    return this.checkPackal(interval);\n                default:\n                    return;\n            }\n        }\n\n        // Got it from cache!\n        latest.checkedOnline = false;\n\n        return latest;\n    }\n}\n\nmodule.exports = new Updater();\n"]}