{"version":3,"sources":["file-cache.js.flow"],"names":["crypto","require","EventEmitter","fs","path","FileCacheStore","_contents","value","key","FileCache","filePath","cacheName","cacheDir","isCleaning","statSync","err","_fileExists","eventResult","file","readFileSync","hash","createHash","update","digest","emit","contents","cachePath","join","readJsonSync","throws","ensureDirSync","dirname","writeJsonSync","emptyDir","emptyDirSync","module","exports"],"mappings":"s/BAEA,GAAMA,QAASC,QAAQ,QAAR,CAAf,CACA,GAAMC,cAAeD,QAAQ,QAAR,EAAkBC,YAAvC,CACA,GAAMC,IAAKF,QAAQ,YAAR,CAAX,CACA,GAAMG,MAAOH,QAAQ,MAAR,CAAb,C,GAMMI,e,YAWF,yBAAc,mDACV,KAAKC,SAAL,CAAiB,EAAjB,CACH,C,4EAeKC,K,CAA6C,CAC/C,KAAKD,SAAL,CAAiBC,KAAjB,CACA,MAAO,KAAP,CACH,C,gCAQGC,G,CAAUD,K,CAA4B,CACtC,KAAKD,SAAL,CAAeE,GAAf,EAAsBD,KAAtB,CACA,MAAO,KAAP,CACH,C,oCAvBc,CACX,MAAO,MAAKD,SAAZ,CACH,C,iCA2BCG,U,yEAaF,mBAAYC,QAAZ,CAA8BC,SAA9B,CAAiDC,QAAjD,CAAmE,gLAG/D,MAAKF,QAAL,CAAgBA,QAAhB,CACA,MAAKC,SAAL,CAAiBA,SAAjB,CACA,MAAKC,QAAL,CAAgBA,QAAhB,CACA,MAAKC,UAAL,CAAkB,KAAlB,CAN+D,aAOlE,C,mFAOWT,I,CAAuB,CAC/B,GAAI,CACAD,GAAGW,QAAH,CAAYV,IAAZ,EACA,MAAO,KAAP,CACH,CAAC,MAAOW,GAAP,CAAY,CACV,MAAO,MAAP,CACH,CACJ,C,iCAMgC,CAC7B,GAAI,KAAKC,WAAL,CAAiB,KAAKN,QAAtB,CAAJ,CAAqC,CAEjC,GAAIO,aAAc,GAAIZ,eAAJ,EAAlB,CAGA,GAAIa,MAAOf,GAAGgB,YAAH,CAAgB,KAAKT,QAArB,CAA+B,MAA/B,CAAX,CAGA,GAAIU,MAAOpB,OAAOqB,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCJ,IAAjC,CAAuC,MAAvC,EAA+CK,MAA/C,CAAsD,KAAtD,CAAX,CAGA,GAAI,CAAC,KAAKX,QAAV,CAAoB,CAChB,KAAKY,IAAL,CAAU,QAAV,CAAoBP,WAApB,CAAiCC,IAAjC,CAAuCE,IAAvC,EACA,MAAOH,aAAYQ,QAAnB,CACH,CAGD,GAAIC,WAAYtB,KAAKuB,IAAL,CAAU,KAAKf,QAAf,CAAyB,KAAKD,SAA9B,CAAyCS,IAAzC,CAAhB,CAGA,GAAI,KAAKJ,WAAL,CAAiBU,SAAjB,CAAJ,CAAiC,CAC7B,MAAOvB,IAAGyB,YAAH,CAAgBF,SAAhB,CAA2B,CAACG,OAAQ,KAAT,CAA3B,CAAP,CACH,CAGD1B,GAAG2B,aAAH,CAAiB1B,KAAK2B,OAAL,CAAaL,SAAb,CAAjB,EAGA,KAAKF,IAAL,CAAU,QAAV,CAAoBP,WAApB,CAAiCC,IAAjC,CAAuCE,IAAvC,EAGAjB,GAAG6B,aAAH,CAAiBN,SAAjB,CAA4BT,YAAYQ,QAAxC,EACA,MAAOR,aAAYQ,QAAnB,CACH,CAED,MAAO,KAAP,CACH,C,gPAQQ,KAAKb,Q,iGAIHT,GAAG8B,QAAH,CAAY7B,KAAKuB,IAAL,CAAU,KAAKf,QAAf,CAAyB,KAAKD,SAA9B,CAAZ,C,qMAOM,CACb,GAAI,CAAC,KAAKC,QAAV,CAAoB,CAChB,OACH,CAED,MAAOT,IAAG+B,YAAH,CAAgB9B,KAAKuB,IAAL,CAAU,KAAKf,QAAf,CAAyB,KAAKD,SAA9B,CAAhB,CAAP,CACH,C,uBAtGmBT,Y,EAyGxBiC,OAAOC,OAAP,CAAiB3B,SAAjB","file":"file-cache.js","sourcesContent":["// @flow\n\nconst crypto = require('crypto');\nconst EventEmitter = require('events').EventEmitter;\nconst fs = require('fs-promise');\nconst path = require('path');\n\n/**\n * FileCache\n * Simple in-memory key/value pair storage to store event listener results\n */\nclass FileCacheStore {\n    /**\n     * Cache contents\n     * @type {Object|Array.<Object>}\n     */\n    _contents: Object|Array<Object>;\n\n    /**\n     * FileCacheStore constructor\n     * @constructor\n     */\n    constructor() {\n        this._contents = {};\n    }\n\n    /**\n     * Get cache contents\n     * @return {Object|Array.<Object>}\n     */\n    get contents() {\n        return this._contents;\n    }\n\n    /**\n     * Set cache contents to value\n     * @param {Object|Arrray.<Object>} value\n     * @return {FileCacheStore}\n     */\n    store(value: Object|Array<Object>): FileCacheStore {\n        this._contents = value;\n        return this;\n    }\n\n    /**\n     * Set a cache value\n     * @param {any} key Key\n     * @param {any} value Value\n     * @return {FileCacheStore}\n     */\n    set(key: any, value: any): FileCacheStore {\n        this._contents[key] = value;\n        return this;\n    }\n}\n\n/**\n * FileCache\n */\nclass FileCache extends EventEmitter {\n    filePath: string;\n    cacheName: string;\n    cacheDir: string;\n    isCleaning: boolean;\n\n    /**\n     * FileCache constructor\n     * @param {string} filePath File to process and check for changes\n     * @param {string} cacheName Unique name for cache directory\n     * @param {string} cacheDir Cache base directory\n     * @constructor\n     */\n    constructor(filePath: string, cacheName: string, cacheDir: string) {\n        super();\n\n        this.filePath = filePath;\n        this.cacheName = cacheName;\n        this.cacheDir = cacheDir;\n        this.isCleaning = false;\n    }\n\n    /**\n     * Check if file exists\n     * @param {string} path\n     * @return {boolean}\n     */\n    _fileExists(path: string): boolean {\n        try {\n            fs.statSync(path);\n            return true;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Get cached contents\n     * @return {Object|Array.<Object>|null}\n     */\n    get(): Object|Array<Object>|null {\n        if (this._fileExists(this.filePath)) {\n            // Create simple in-memory store for event listener results\n            let eventResult = new FileCacheStore();\n\n            // Read file\n            let file = fs.readFileSync(this.filePath, 'utf8');\n\n            // Calculate file hash\n            let hash = crypto.createHash('sha1').update(file, 'utf8').digest('hex');\n\n            // Always call callback when cache dir is not set\n            if (!this.cacheDir) {\n                this.emit('change', eventResult, file, hash);\n                return eventResult.contents;\n            }\n\n            // Get cache path\n            let cachePath = path.join(this.cacheDir, this.cacheName, hash);\n\n            // Return cached data if found\n            if (this._fileExists(cachePath)) {\n                return fs.readJsonSync(cachePath, {throws: false});\n            }\n\n            // Create cache directory if it doesn't exist\n            fs.ensureDirSync(path.dirname(cachePath));\n\n            // Get processed data\n            this.emit('change', eventResult, file, hash);\n\n            // Write cache\n            fs.writeJsonSync(cachePath, eventResult.contents);\n            return eventResult.contents;\n        }\n\n        return null;\n    }\n\n    /**\n     * Clear cache\n     * @async\n     * @return {Promise}\n     */\n    async clearCache() {\n        if (!this.cacheDir) {\n            return;\n        }\n\n        return fs.emptyDir(path.join(this.cacheDir, this.cacheName));\n    }\n\n    /**\n     * Clear cache synchronously\n     * @return {void}\n     */\n    clearCacheSync() {\n        if (!this.cacheDir) {\n            return;\n        }\n\n        return fs.emptyDirSync(path.join(this.cacheDir, this.cacheName));\n    }\n}\n\nmodule.exports = FileCache;\n"]}